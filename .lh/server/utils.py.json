{
    "sourceFile": "server/utils.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1710666211223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1710666306419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+import json\r\n+import os\r\n+import base64\r\n+import aioredis\r\n+from fastapi import FastAPI\r\n+from datetime import datetime\r\n+from dotenv import load_dotenv\r\n+from jinja2 import Environment, FileSystemLoader\r\n+env = Environment(loader=FileSystemLoader(\"scripts\"))\r\n+load_dotenv()\r\n+\r\n+\r\n+def register_redis(app: FastAPI):\r\n+    async def redis_pool():\r\n+        redis = await aioredis.from_url(\r\n+            url=os.getenv('REDIS_URL'), db=1, encoding=\"utf-8\", decode_responses=True\r\n+        )\r\n+        return redis\r\n+\r\n+    async def redis_accounts():\r\n+        redis = await aioredis.from_url(\r\n+            url=os.getenv('REDIS_URL'), db=2, encoding=\"utf-8\", decode_responses=True\r\n+        )\r\n+        return redis\r\n+\r\n+    async def redis_order():\r\n+        redis = await aioredis.from_url(\r\n+            url=os.getenv('REDIS_URL'), db=3, encoding=\"utf-8\", decode_responses=True\r\n+        )\r\n+        return redis\r\n+\r\n+\r\n+    @app.on_event(\"startup\")\r\n+    async def srartup_event():\r\n+        app.redis = await redis_pool()\r\n+        app.redis_accounts = await redis_accounts()\r\n+        app.redis_order = await redis_order()\r\n+\r\n+    @app.on_event(\"shutdown\")\r\n+    async def shutdown_event():\r\n+        await app.redis.close()\r\n+        await app.redis_accounts.close()\r\n+        await app.redis_order.close()\r\n+\r\n+async def get_all_devices(redis, accounts):\r\n+    keys = await redis.keys('*')\r\n+    account_keys = await accounts.keys('*')\r\n+    devices = []\r\n+    list = []\r\n+    for key in keys:\r\n+        if not key.startswith(\"queue\"):\r\n+            status = await redis.get(key)\r\n+            if status:\r\n+                device = {\r\n+                    'device_id': key,\r\n+                    'status': status\r\n+                }\r\n+                devices.append(device)\r\n+    for key in account_keys:\r\n+        value = await accounts.get(key)\r\n+        list.append(json.loads(value))\r\n+    return {\"devices\": devices, \"tasks\": list}\r\n+\r\n+\r\n+async def handle_devices(websocket, redis, accounts, device_id):\r\n+    result = await redis.lpop(f\"queue:{device_id}\")\r\n+    if result:\r\n+        await redis.set(device_id, \"准备接受脚本\")\r\n+        task = await redis.lpop(f\"queue:task\")\r\n+        if task:\r\n+            task_json = json.loads(task)\r\n+            task_json['status'] = \"1\"\r\n+            template = env.get_template(f\"{task_json['category']}.j2\")\r\n+            await redis.set(device_id, f\"工作中| {task_json['username']},{task_json['password']},{task_json['idcard']},{task_json['date']}\")\r\n+            await accounts.set(task_json['id'], json.dumps(task_json))\r\n+            script = template.render(id=task_json['id'],\r\n+                                        device_id=device_id,\r\n+                                        idcard=task_json['idcard'],\r\n+                                        contact=os.getenv(\"PHONE\"),\r\n+                                        day=datetime.strptime(task_json['date'], \"%Y-%m-%d\").day)\r\n+            json_response = json.dumps({\r\n+                \"id\": task_json['id'],\r\n+                \"script\": script\r\n+            })\r\n+            json_response = base64.b64encode(json_response.encode(\"utf-8\")).decode(\"utf-8\")\r\n+            await websocket.send_text(json_response)\r\n+    else:\r\n+        await redis.setnx(device_id, \"闲置中\")\r\n+    await redis.expire(device_id, 10)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1710666211223,
            "name": "Commit-0",
            "content": "import json\r\nimport os\r\nimport base64\r\nimport aioredis\r\nfrom fastapi import FastAPI\r\nfrom datetime import datetime\r\nfrom dotenv import load_dotenv\r\nfrom jinja2 import Environment, FileSystemLoader\r\nenv = Environment(loader=FileSystemLoader(\"scripts\"))\r\nload_dotenv()\r\n\r\n\r\ndef register_redis(app: FastAPI):\r\n    async def redis_pool():\r\n        redis = await aioredis.from_url(\r\n            url=os.getenv('REDIS_URL'), db=1, encoding=\"utf-8\", decode_responses=True\r\n        )\r\n        return redis\r\n\r\n    async def redis_accounts():\r\n        redis = await aioredis.from_url(\r\n            url=os.getenv('REDIS_URL'), db=2, encoding=\"utf-8\", decode_responses=True\r\n        )\r\n        return redis\r\n\r\n    async def redis_order():\r\n        redis = await aioredis.from_url(\r\n            url=os.getenv('REDIS_URL'), db=3, encoding=\"utf-8\", decode_responses=True\r\n        )\r\n        return redis\r\n\r\n\r\n    @app.on_event(\"startup\")\r\n    async def srartup_event():\r\n        app.redis = await redis_pool()\r\n        app.redis_accounts = await redis_accounts()\r\n        app.redis_order = await redis_order()\r\n\r\n    @app.on_event(\"shutdown\")\r\n    async def shutdown_event():\r\n        await app.redis.close()\r\n        await app.redis.wait_closed()\r\n        await app.redis_accounts.close()\r\n        await app.redis_accounts.wait_closed()\r\n        await app.redis_order.close()\r\n        await app.redis_order.wait_closed()\r\n\r\nasync def get_all_devices(redis, accounts):\r\n    keys = await redis.keys('*')\r\n    account_keys = await accounts.keys('*')\r\n    devices = []\r\n    list = []\r\n    for key in keys:\r\n        if not key.startswith(\"queue\"):\r\n            status = await redis.get(key)\r\n            if status:\r\n                device = {\r\n                    'device_id': key,\r\n                    'status': status\r\n                }\r\n                devices.append(device)\r\n    for key in account_keys:\r\n        value = await accounts.get(key)\r\n        list.append(json.loads(value))\r\n    return {\"devices\": devices, \"tasks\": list}\r\n\r\n\r\nasync def handle_devices(websocket, redis, accounts, device_id):\r\n    result = await redis.lpop(f\"queue:{device_id}\")\r\n    if result:\r\n        await redis.set(device_id, \"准备接受脚本\")\r\n        task = await redis.lpop(f\"queue:task\")\r\n        if task:\r\n            task_json = json.loads(task)\r\n            task_json['status'] = \"1\"\r\n            template = env.get_template(f\"{task_json['category']}.j2\")\r\n            await redis.set(device_id, f\"工作中| {task_json['username']},{task_json['password']},{task_json['idcard']},{task_json['date']}\")\r\n            await accounts.set(task_json['id'], json.dumps(task_json))\r\n            script = template.render(id=task_json['id'],\r\n                                        device_id=device_id,\r\n                                        idcard=task_json['idcard'],\r\n                                        contact=os.getenv(\"PHONE\"),\r\n                                        day=datetime.strptime(task_json['date'], \"%Y-%m-%d\").day)\r\n            json_response = json.dumps({\r\n                \"id\": task_json['id'],\r\n                \"script\": script\r\n            })\r\n            json_response = base64.b64encode(json_response.encode(\"utf-8\")).decode(\"utf-8\")\r\n            await websocket.send_text(json_response)\r\n    else:\r\n        await redis.setnx(device_id, \"闲置中\")\r\n    await redis.expire(device_id, 10)"
        }
    ]
}