{
    "sourceFile": "server/main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 56,
            "patches": [
                {
                    "date": 1710661491342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1710661743886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n \r\n app = FastAPI()\r\n \r\n register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n \r\n+\r\n app.add_middleware(\r\n     CORSMiddleware,\r\n     allow_origins=[\"*\"],\r\n     allow_methods=[\"*\"],\r\n"
                },
                {
                    "date": 1710662154220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n     allow_origins=[\"*\"],\r\n     allow_methods=[\"*\"],\r\n     allow_headers=[\"*\"],\r\n )\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n \r\n-\r\n @app.websocket(\"/ws/{device_id}\")\r\n async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n     await websocket.accept()\r\n     print(websocket.client.host)\r\n"
                },
                {
                    "date": 1710666053789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,11 @@\n )\r\n oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n \r\n @app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str, token: str):\r\n+    print()\r\n     await websocket.accept()\r\n-    print(websocket.client.host)\r\n     redis = app.redis\r\n     accounts = app.redis_accounts\r\n     try:\r\n         while True:\r\n"
                },
                {
                    "date": 1710666101028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n )\r\n oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n \r\n @app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str, token: str):\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n     print()\r\n     await websocket.accept()\r\n     redis = app.redis\r\n     accounts = app.redis_accounts\r\n"
                },
                {
                    "date": 1710666132410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+import json\r\n+import os\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+import base64\r\n+import jwt\r\n+\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    token = await websocket.receive_text()\r\n+    print(f\"token: {token}\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    try:\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                resposne = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(resposne)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except jwt.exceptions.InvalidTokenError:\r\n+        await websocket.close()\r\n+    except Exception as e:\r\n+        await websocket.close()\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       print(token)\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710666279764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,156 +14,20 @@\n \r\n app = FastAPI()\r\n \r\n register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n \r\n-\r\n app.add_middleware(\r\n     CORSMiddleware,\r\n     allow_origins=[\"*\"],\r\n     allow_methods=[\"*\"],\r\n     allow_headers=[\"*\"],\r\n )\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n \r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    token = await websocket.receive_text()\r\n-    print(f\"token: {token}\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    try:\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                resposne = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(resposne)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except jwt.exceptions.InvalidTokenError:\r\n-        await websocket.close()\r\n-    except Exception as e:\r\n-        await websocket.close()\r\n \r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       print(token)\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-import base64\r\n-import jwt\r\n-\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n @app.websocket(\"/ws/{device_id}\")\r\n async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    print()\r\n     await websocket.accept()\r\n     redis = app.redis\r\n     accounts = app.redis_accounts\r\n     try:\r\n"
                },
                {
                    "date": 1710666377644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import json\r\n+import os\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+import base64\r\n+import jwt\r\n+\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    try:\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                resposne = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(resposne)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except jwt.exceptions.InvalidTokenError:\r\n+        await websocket.close()\r\n+    except Exception as e:\r\n+        await websocket.close()\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       print(token)\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710666383871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,141 @@\n+import json\r\n+import os\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+import base64\r\n+import jwt\r\n+\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    try:\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                resposne = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(resposne)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except jwt.exceptions.InvalidTokenError:\r\n+        await websocket.close()\r\n+    except Exception as e:\r\n+        await websocket.close()\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       print(token)\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710666404055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import json\r\n import os\r\n+import signal\r\n from datetime import datetime, timedelta\r\n from fastapi.security import OAuth2PasswordBearer as OAuth\r\n from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n from fastapi.middleware.cors import CORSMiddleware\r\n@@ -137,278 +138,5 @@\n \r\n if __name__ == \"__main__\":\r\n     import uvicorn\r\n     signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-import base64\r\n-import jwt\r\n-\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    try:\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                resposne = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(resposne)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except jwt.exceptions.InvalidTokenError:\r\n-        await websocket.close()\r\n-    except Exception as e:\r\n-        await websocket.close()\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       print(token)\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-import base64\r\n-import jwt\r\n-\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    try:\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                resposne = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(resposne)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except jwt.exceptions.InvalidTokenError:\r\n-        await websocket.close()\r\n-    except Exception as e:\r\n-        await websocket.close()\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       print(token)\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n     uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710666483233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+import base64\r\n+import jwt\r\n+\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    try:\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                resposne = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(resposne)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except jwt.exceptions.InvalidTokenError:\r\n+        await websocket.close()\r\n+    except Exception as e:\r\n+        await websocket.close()\r\n+    finally:\r\n+        await websocket.close()\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       print(token)\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710666677691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+import base64\r\n+import jwt\r\n+\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    try:\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                resposne = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(resposne)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except jwt.exceptions.InvalidTokenError:\r\n+        await websocket.close()\r\n+    except Exception as e:\r\n+        await websocket.close()\r\n+    finally:\r\n+        await websocket.close()\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       print(token)\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    tasks = [task for task in asyncio.all_tasks() if task is not asyncio.current_task()]\r\n+    [task.cancel() for task in tasks]\r\n+    await asyncio.gather(*tasks, return_exceptions=True)\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710666700117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,10 @@\n from utils import register_redis, get_all_devices,handle_devices\r\n from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n import base64\r\n import jwt\r\n+import asyncio\r\n \r\n-\r\n app = FastAPI()\r\n \r\n register_redis(app)\r\n oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n@@ -145,291 +145,5 @@\n \r\n if __name__ == \"__main__\":\r\n     import uvicorn\r\n     signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-import signal\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-import base64\r\n-import jwt\r\n-\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    try:\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                resposne = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(resposne)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except jwt.exceptions.InvalidTokenError:\r\n-        await websocket.close()\r\n-    except Exception as e:\r\n-        await websocket.close()\r\n-    finally:\r\n-        await websocket.close()\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       print(token)\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-import signal\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-import base64\r\n-import jwt\r\n-\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    try:\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                resposne = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(resposne)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except jwt.exceptions.InvalidTokenError:\r\n-        await websocket.close()\r\n-    except Exception as e:\r\n-        await websocket.close()\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       print(token)\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    signal.signal(signal.SIGINT, handle_shutdown)\r\n     uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710666780423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,158 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    try:\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                resposne = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(resposne)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except jwt.exceptions.InvalidTokenError:\r\n+        await websocket.close()\r\n+    except Exception as e:\r\n+        await websocket.close()\r\n+    finally:\r\n+        await websocket.close()\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       print(token)\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    tasks = [task for task in asyncio.all_tasks() if task is not asyncio.current_task()]\r\n+    [task.cancel() for task in tasks]\r\n+\r\n+    # 等待所有任务完成并处理异常\r\n+    for task in tasks:\r\n+        try:\r\n+            await task\r\n+        except asyncio.CancelledError:\r\n+            pass\r\n+        except Exception as exc:\r\n+            # 处理其他异常\r\n+            print(f\"Exception during shutdown: {exc}\")\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710666834708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,158 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    try:\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                resposne = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(resposne)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except jwt.exceptions.InvalidTokenError:\r\n+        await websocket.close()\r\n+    except Exception as e:\r\n+        await websocket.close()\r\n+    finally:\r\n+        await websocket.close()\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+async def close_database_connection():\r\n+    await Tortoise.close_connections()\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       print(token)\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    tasks = [task for task in asyncio.all_tasks() if task is not asyncio.current_task()]\r\n+    [task.cancel() for task in tasks]\r\n+    for task in tasks:\r\n+        try:\r\n+            await task\r\n+        except asyncio.CancelledError:\r\n+            pass\r\n+        except Exception as exc:\r\n+            print(f\"Exception during shutdown: {exc}\")\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710666844591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,9 @@\n     loop.stop()\r\n \r\n @app.on_event(\"shutdown\")\r\n async def shutdown_event():\r\n+    await close_database_connection()\r\n     tasks = [task for task in asyncio.all_tasks() if task is not asyncio.current_task()]\r\n     [task.cancel() for task in tasks]\r\n     for task in tasks:\r\n         try:\r\n@@ -154,312 +155,5 @@\n \r\n if __name__ == \"__main__\":\r\n     import uvicorn\r\n     signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-import signal\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-import base64\r\n-import jwt\r\n-import asyncio\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    try:\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                resposne = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(resposne)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except jwt.exceptions.InvalidTokenError:\r\n-        await websocket.close()\r\n-    except Exception as e:\r\n-        await websocket.close()\r\n-    finally:\r\n-        await websocket.close()\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       print(token)\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-@app.on_event(\"shutdown\")\r\n-async def shutdown_event():\r\n-    tasks = [task for task in asyncio.all_tasks() if task is not asyncio.current_task()]\r\n-    [task.cancel() for task in tasks]\r\n-\r\n-    # 等待所有任务完成并处理异常\r\n-    for task in tasks:\r\n-        try:\r\n-            await task\r\n-        except asyncio.CancelledError:\r\n-            pass\r\n-        except Exception as exc:\r\n-            # 处理其他异常\r\n-            print(f\"Exception during shutdown: {exc}\")\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-import signal\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-import base64\r\n-import jwt\r\n-import asyncio\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    try:\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                resposne = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(resposne)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except jwt.exceptions.InvalidTokenError:\r\n-        await websocket.close()\r\n-    except Exception as e:\r\n-        await websocket.close()\r\n-    finally:\r\n-        await websocket.close()\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       print(token)\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-@app.on_event(\"shutdown\")\r\n-async def shutdown_event():\r\n-    tasks = [task for task in asyncio.all_tasks() if task is not asyncio.current_task()]\r\n-    [task.cancel() for task in tasks]\r\n-    await asyncio.gather(*tasks, return_exceptions=True)\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    signal.signal(signal.SIGINT, handle_shutdown)\r\n     uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710666862284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,17 +142,8 @@\n \r\n @app.on_event(\"shutdown\")\r\n async def shutdown_event():\r\n     await close_database_connection()\r\n-    tasks = [task for task in asyncio.all_tasks() if task is not asyncio.current_task()]\r\n-    [task.cancel() for task in tasks]\r\n-    for task in tasks:\r\n-        try:\r\n-            await task\r\n-        except asyncio.CancelledError:\r\n-            pass\r\n-        except Exception as exc:\r\n-            print(f\"Exception during shutdown: {exc}\")\r\n \r\n if __name__ == \"__main__\":\r\n     import uvicorn\r\n     signal.signal(signal.SIGINT, handle_shutdown)\r\n"
                },
                {
                    "date": 1710666909967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,10 @@\n \r\n @app.websocket(\"/ws/{device_id}\")\r\n async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n     await websocket.accept()\r\n+    token = await websocket.receive_text()\r\n+    print(token)\r\n     redis = app.redis\r\n     accounts = app.redis_accounts\r\n     try:\r\n         while True:\r\n"
                },
                {
                    "date": 1710666936225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,8 @@\n                 await handle_devices(websocket, redis, accounts, device_id) \r\n             if message != \"ping\":\r\n                 pass\r\n             await websocket.send_text(response)\r\n-    except jwt.exceptions.InvalidTokenError:\r\n-        await websocket.close()\r\n     except Exception as e:\r\n         await websocket.close()\r\n     finally:\r\n         await websocket.close()\r\n"
                },
                {
                    "date": 1710667032326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    try:\r\n+         token = await websocket.receive_text()\r\n+         print(token)\r\n+         redis = app.redis\r\n+         accounts = app.redis_accounts\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                resposne = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(resposne)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except Exception as e:\r\n+        await websocket.close()\r\n+    finally:\r\n+        await websocket.close()\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+async def close_database_connection():\r\n+    await Tortoise.close_connections()\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       print(token)\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    await close_database_connection()\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710667041349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,12 +29,12 @@\n @app.websocket(\"/ws/{device_id}\")\r\n async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n     await websocket.accept()\r\n     try:\r\n-         token = await websocket.receive_text()\r\n-         print(token)\r\n-         redis = app.redis\r\n-         accounts = app.redis_accounts\r\n+        token = await websocket.receive_text()\r\n+        print(token)\r\n+        redis = app.redis\r\n+        accounts = app.redis_accounts\r\n         while True:\r\n             message = await websocket.receive_text()\r\n             response = \"\"\r\n             if device_id == \"manager\":\r\n@@ -146,155 +146,5 @@\n \r\n if __name__ == \"__main__\":\r\n     import uvicorn\r\n     signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-import signal\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-import base64\r\n-import jwt\r\n-import asyncio\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    token = await websocket.receive_text()\r\n-    print(token)\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    try:\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                resposne = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(resposne)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except Exception as e:\r\n-        await websocket.close()\r\n-    finally:\r\n-        await websocket.close()\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-async def close_database_connection():\r\n-    await Tortoise.close_connections()\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       print(token)\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-@app.on_event(\"shutdown\")\r\n-async def shutdown_event():\r\n-    await close_database_connection()\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    signal.signal(signal.SIGINT, handle_shutdown)\r\n     uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710667083305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,8 @@\n                 pass\r\n             await websocket.send_text(response)\r\n     except Exception as e:\r\n         await websocket.close()\r\n-    finally:\r\n-        await websocket.close()\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n async def reset():\r\n"
                },
                {
                    "date": 1710667467033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,10 @@\n             if message != \"ping\":\r\n                 pass\r\n             await websocket.send_text(response)\r\n     except Exception as e:\r\n-        await websocket.close()\r\n+        pass\r\n+        # await websocket.close()\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n async def reset():\r\n"
                },
                {
                    "date": 1710668327894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n     await websocket.accept()\r\n     try:\r\n         token = await websocket.receive_text()\r\n-        print(token)\r\n+        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n         redis = app.redis\r\n         accounts = app.redis_accounts\r\n         while True:\r\n             message = await websocket.receive_text()\r\n@@ -126,9 +126,8 @@\n \r\n @app.post(\"/api/verify\")\r\n def verify(token: str = Depends(oauth2_scheme)):\r\n     try:\r\n-       print(token)\r\n        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n        return {\"token\": token, \"payload\": payload}\r\n     except:\r\n         raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n"
                },
                {
                    "date": 1710668358898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n     await websocket.accept()\r\n     try:\r\n         token = await websocket.receive_text()\r\n         payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+        print(payload)\r\n         redis = app.redis\r\n         accounts = app.redis_accounts\r\n         while True:\r\n             message = await websocket.receive_text()\r\n"
                },
                {
                    "date": 1710668460620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    try:\r\n+        token = await websocket.receive_text()\r\n+        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+        print(payload)\r\n+        redis = app.redis\r\n+        accounts = app.redis_accounts\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                resposne = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(resposne)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except DecodeError:\r\n+        print(\"Invalid token\")\r\n+    except Exception as e:\r\n+        # await websocket.close()\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+async def close_database_connection():\r\n+    await Tortoise.close_connections()\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    await close_database_connection()\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710668474615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,157 +48,9 @@\n             await websocket.send_text(response)\r\n     except DecodeError:\r\n         print(\"Invalid token\")\r\n     except Exception as e:\r\n-        # await websocket.close()\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n         pass\r\n-\r\n-\r\n-async def close_database_connection():\r\n-    await Tortoise.close_connections()\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-@app.on_event(\"shutdown\")\r\n-async def shutdown_event():\r\n-    await close_database_connection()\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-import signal\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-import base64\r\n-import jwt\r\n-import asyncio\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    try:\r\n-        token = await websocket.receive_text()\r\n-        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-        print(payload)\r\n-        redis = app.redis\r\n-        accounts = app.redis_accounts\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                resposne = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(resposne)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except Exception as e:\r\n-        pass\r\n         # await websocket.close()\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n"
                },
                {
                    "date": 1710668514502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+from jwt.exceptions import DecodeError\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    try:\r\n+        token = await websocket.receive_text()\r\n+        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+        print(payload)\r\n+        redis = app.redis\r\n+        accounts = app.redis_accounts\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                resposne = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(resposne)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except DecodeError:\r\n+        print(\"Invalid token\")\r\n+    except Exception as e:\r\n+        pass\r\n+        # await websocket.close()\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+async def close_database_connection():\r\n+    await Tortoise.close_connections()\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    await close_database_connection()\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710668590872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n from models import Orders\r\n from utils import register_redis, get_all_devices,handle_devices\r\n from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n from jwt.exceptions import DecodeError\r\n+from starlette import status\r\n import base64\r\n import jwt\r\n import asyncio\r\n \r\n@@ -47,9 +48,9 @@\n             if message != \"ping\":\r\n                 pass\r\n             await websocket.send_text(response)\r\n     except DecodeError:\r\n-        print(\"Invalid token\")\r\n+        await websocket.close(code=status.HTTP_401_UNAUTHORIZED)\r\n     except Exception as e:\r\n         pass\r\n         # await websocket.close()\r\n \r\n@@ -148,156 +149,5 @@\n \r\n if __name__ == \"__main__\":\r\n     import uvicorn\r\n     signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-import signal\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-import base64\r\n-import jwt\r\n-import asyncio\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    try:\r\n-        token = await websocket.receive_text()\r\n-        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-        print(payload)\r\n-        redis = app.redis\r\n-        accounts = app.redis_accounts\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                resposne = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(resposne)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except DecodeError:\r\n-        print(\"Invalid token\")\r\n-    except Exception as e:\r\n-        pass\r\n-        # await websocket.close()\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-async def close_database_connection():\r\n-    await Tortoise.close_connections()\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-@app.on_event(\"shutdown\")\r\n-async def shutdown_event():\r\n-    await close_database_connection()\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    signal.signal(signal.SIGINT, handle_shutdown)\r\n     uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710668701667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+from jwt.exceptions import DecodeError\r\n+from starlette import status\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    try:\r\n+        token = await websocket.receive_text()\r\n+        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+        print(payload)\r\n+        redis = app.redis\r\n+        accounts = app.redis_accounts\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                resposne = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(resposne)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except DecodeError:\r\n+        await websocket.close(code=401)\r\n+    except Exception as e:\r\n+        pass\r\n+        # await websocket.close()\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+async def close_database_connection():\r\n+    await Tortoise.close_connections()\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    await close_database_connection()\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710668746225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,161 +48,9 @@\n             if message != \"ping\":\r\n                 pass\r\n             await websocket.send_text(response)\r\n     except DecodeError:\r\n-        await websocket.close(code=401)\r\n-    except Exception as e:\r\n-        pass\r\n-        # await websocket.close()\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-async def close_database_connection():\r\n-    await Tortoise.close_connections()\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-@app.on_event(\"shutdown\")\r\n-async def shutdown_event():\r\n-    await close_database_connection()\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-import signal\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-from jwt.exceptions import DecodeError\r\n-from starlette import status\r\n-import base64\r\n-import jwt\r\n-import asyncio\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    try:\r\n-        token = await websocket.receive_text()\r\n-        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-        print(payload)\r\n-        redis = app.redis\r\n-        accounts = app.redis_accounts\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                resposne = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(resposne)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except DecodeError:\r\n+        print(\"Invalid token\")\r\n         await websocket.close(code=status.HTTP_401_UNAUTHORIZED)\r\n     except Exception as e:\r\n         pass\r\n         # await websocket.close()\r\n"
                },
                {
                    "date": 1710668956509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,9 @@\n     except DecodeError:\r\n         print(\"Invalid token\")\r\n         await websocket.close(code=status.HTTP_401_UNAUTHORIZED)\r\n     except Exception as e:\r\n-        pass\r\n-        # await websocket.close()\r\n+        await websocket.close(code=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n async def reset():\r\n"
                },
                {
                    "date": 1710668996623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n                 pass\r\n             await websocket.send_text(response)\r\n     except DecodeError:\r\n         print(\"Invalid token\")\r\n-        await websocket.close(code=status.HTTP_401_UNAUTHORIZED)\r\n+        await websocket.close(code=status.HTTP_401_UNAUTHORIZED, reason=\"Invalid token\")\r\n     except Exception as e:\r\n         await websocket.close(code=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n \r\n \r\n"
                },
                {
                    "date": 1710669288874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,10 @@\n         while True:\r\n             message = await websocket.receive_text()\r\n             response = \"\"\r\n             if device_id == \"manager\":\r\n-                resposne = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(resposne)\r\n+                response = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(response)\r\n             else:\r\n                 await handle_devices(websocket, redis, accounts, device_id) \r\n             if message != \"ping\":\r\n                 pass\r\n@@ -51,8 +51,9 @@\n     except DecodeError:\r\n         print(\"Invalid token\")\r\n         await websocket.close(code=status.HTTP_401_UNAUTHORIZED, reason=\"Invalid token\")\r\n     except Exception as e:\r\n+        print(\"Other exception occurred\")\r\n         await websocket.close(code=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n"
                },
                {
                    "date": 1710669407343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n                 await handle_devices(websocket, redis, accounts, device_id) \r\n             if message != \"ping\":\r\n                 pass\r\n             await websocket.send_text(response)\r\n-    except DecodeError:\r\n+    except InvalidTokenError:\r\n         print(\"Invalid token\")\r\n         await websocket.close(code=status.HTTP_401_UNAUTHORIZED, reason=\"Invalid token\")\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n"
                },
                {
                    "date": 1710669413318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n from tortoise import Tortoise\r\n from models import Orders\r\n from utils import register_redis, get_all_devices,handle_devices\r\n from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-from jwt.exceptions import DecodeError\r\n+from jwt.exceptions import DecodeError,InvalidTokenError\r\n from starlette import status\r\n import base64\r\n import jwt\r\n import asyncio\r\n"
                },
                {
                    "date": 1710669504364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,12 +49,11 @@\n                 pass\r\n             await websocket.send_text(response)\r\n     except InvalidTokenError:\r\n         print(\"Invalid token\")\r\n-        await websocket.close(code=status.HTTP_401_UNAUTHORIZED, reason=\"Invalid token\")\r\n+        \r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n-        await websocket.close(code=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n async def reset():\r\n"
                },
                {
                    "date": 1710669522970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+from jwt.exceptions import DecodeError,InvalidTokenError\r\n+from starlette import status\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    try:\r\n+        token = await websocket.receive_text()\r\n+        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+        print(payload)\r\n+        redis = app.redis\r\n+        accounts = app.redis_accounts\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                response = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(response)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except InvalidTokenError:\r\n+        print(\"Invalid token\")\r\n+        await websocket.close(code=401)\r\n+    except Exception as e:\r\n+        print(\"Other exception occurred\")\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+async def close_database_connection():\r\n+    await Tortoise.close_connections()\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    await close_database_connection()\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710671497084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,8 @@\n                 pass\r\n             await websocket.send_text(response)\r\n     except InvalidTokenError:\r\n         print(\"Invalid token\")\r\n-        await websocket.close(code=401)\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n \r\n \r\n@@ -149,158 +148,5 @@\n \r\n if __name__ == \"__main__\":\r\n     import uvicorn\r\n     signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-import signal\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-from jwt.exceptions import DecodeError,InvalidTokenError\r\n-from starlette import status\r\n-import base64\r\n-import jwt\r\n-import asyncio\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    try:\r\n-        token = await websocket.receive_text()\r\n-        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-        print(payload)\r\n-        redis = app.redis\r\n-        accounts = app.redis_accounts\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                response = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(response)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except InvalidTokenError:\r\n-        print(\"Invalid token\")\r\n-        \r\n-    except Exception as e:\r\n-        print(\"Other exception occurred\")\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-async def close_database_connection():\r\n-    await Tortoise.close_connections()\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-@app.on_event(\"shutdown\")\r\n-async def shutdown_event():\r\n-    await close_database_connection()\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    signal.signal(signal.SIGINT, handle_shutdown)\r\n     uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710671551377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,10 @@\n     except InvalidTokenError:\r\n         print(\"Invalid token\")\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n+    finially:\r\n+        await websocket.close(code=status.WS_1000_NORMAL_CLOSURE)\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n async def reset():\r\n"
                },
                {
                    "date": 1710671576193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n         print(\"Invalid token\")\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n     finially:\r\n-        await websocket.close(code=status.WS_1000_NORMAL_CLOSURE)\r\n+        await websocket.close(code=401)\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n async def reset():\r\n"
                },
                {
                    "date": 1710671588006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     except InvalidTokenError:\r\n         print(\"Invalid token\")\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n-    finially:\r\n+    finally:\r\n         await websocket.close(code=401)\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n"
                },
                {
                    "date": 1710671599471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n         print(\"Invalid token\")\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n     finally:\r\n-        await websocket.close(code=401)\r\n+        await websocket.close(code=\"401\")\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n async def reset():\r\n"
                },
                {
                    "date": 1710671668212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n         print(\"Invalid token\")\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n     finally:\r\n-        await websocket.close(code=\"401\")\r\n+        await websocket.disconnect(code=\"401\")\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n async def reset():\r\n"
                },
                {
                    "date": 1710671692643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+from jwt.exceptions import DecodeError,InvalidTokenError\r\n+from starlette import status\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    try:\r\n+        token = await websocket.receive_text()\r\n+        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+        print(payload)\r\n+        redis = app.redis\r\n+        accounts = app.redis_accounts\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                response = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(response)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except InvalidTokenError:\r\n+        print(\"Invalid token\")\r\n+    except Exception as e:\r\n+        print(\"Other exception occurred\")\r\n+    finally:\r\n+        await websocket.disconnect(code=401)\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+async def close_database_connection():\r\n+    await Tortoise.close_connections()\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    await close_database_connection()\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710671841915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n         print(\"Invalid token\")\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n     finally:\r\n-        await websocket.disconnect(code=401)\r\n+        await websocket.close(code=401)\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n async def reset():\r\n@@ -150,159 +150,5 @@\n \r\n if __name__ == \"__main__\":\r\n     import uvicorn\r\n     signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-import signal\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-from jwt.exceptions import DecodeError,InvalidTokenError\r\n-from starlette import status\r\n-import base64\r\n-import jwt\r\n-import asyncio\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    try:\r\n-        token = await websocket.receive_text()\r\n-        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-        print(payload)\r\n-        redis = app.redis\r\n-        accounts = app.redis_accounts\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                response = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(response)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except InvalidTokenError:\r\n-        print(\"Invalid token\")\r\n-    except Exception as e:\r\n-        print(\"Other exception occurred\")\r\n-    finally:\r\n-        await websocket.disconnect(code=\"401\")\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-async def close_database_connection():\r\n-    await Tortoise.close_connections()\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-@app.on_event(\"shutdown\")\r\n-async def shutdown_event():\r\n-    await close_database_connection()\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    signal.signal(signal.SIGINT, handle_shutdown)\r\n     uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710671855318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+from jwt.exceptions import DecodeError,InvalidTokenError\r\n+from starlette import status\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    try:\r\n+        await websocket.close(code=401)\r\n+        token = await websocket.receive_text()\r\n+        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+        print(payload)\r\n+        redis = app.redis\r\n+        accounts = app.redis_accounts\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                response = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(response)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except InvalidTokenError:\r\n+        print(\"Invalid token\")\r\n+    except Exception as e:\r\n+        print(\"Other exception occurred\")\r\n+    finally:\r\n+        await websocket.close(code=401)\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+async def close_database_connection():\r\n+    await Tortoise.close_connections()\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    await close_database_connection()\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710671949614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n     await websocket.accept()\r\n     try:\r\n         await websocket.close(code=401)\r\n+        return\r\n         token = await websocket.receive_text()\r\n         payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n         print(payload)\r\n         redis = app.redis\r\n@@ -151,159 +152,5 @@\n \r\n if __name__ == \"__main__\":\r\n     import uvicorn\r\n     signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-import signal\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-from jwt.exceptions import DecodeError,InvalidTokenError\r\n-from starlette import status\r\n-import base64\r\n-import jwt\r\n-import asyncio\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    try:\r\n-        token = await websocket.receive_text()\r\n-        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-        print(payload)\r\n-        redis = app.redis\r\n-        accounts = app.redis_accounts\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                response = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(response)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except InvalidTokenError:\r\n-        print(\"Invalid token\")\r\n-    except Exception as e:\r\n-        print(\"Other exception occurred\")\r\n-    finally:\r\n-        await websocket.close(code=401)\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-async def close_database_connection():\r\n-    await Tortoise.close_connections()\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-@app.on_event(\"shutdown\")\r\n-async def shutdown_event():\r\n-    await close_database_connection()\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    signal.signal(signal.SIGINT, handle_shutdown)\r\n     uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710672006150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+from jwt.exceptions import DecodeError,InvalidTokenError\r\n+from starlette import status\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    try:\r\n+        await websocket.close(code=401)\r\n+        return\r\n+        token = await websocket.receive_text()\r\n+        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+        print(payload)\r\n+        redis = app.redis\r\n+        accounts = app.redis_accounts\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                response = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(response)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except InvalidTokenError:\r\n+        print(\"Invalid token\")\r\n+    except Exception as e:\r\n+        print(\"Other exception occurred\")\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+async def close_database_connection():\r\n+    await Tortoise.close_connections()\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    await close_database_connection()\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710672029763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,9 @@\n @app.websocket(\"/ws/{device_id}\")\r\n async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n     await websocket.accept()\r\n     try:\r\n-        await websocket.close(code=401)\r\n-        return\r\n+       \r\n         token = await websocket.receive_text()\r\n         payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n         print(payload)\r\n         redis = app.redis\r\n@@ -53,8 +52,9 @@\n     except InvalidTokenError:\r\n         print(\"Invalid token\")\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n+         await websocket.close(code=401)\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n async def reset():\r\n@@ -150,161 +150,5 @@\n \r\n if __name__ == \"__main__\":\r\n     import uvicorn\r\n     signal.signal(signal.SIGINT, handle_shutdown)\r\n-    uvicorn.run(app, host=\"localhost\", port=8000)\n-import json\r\n-import os\r\n-import signal\r\n-from datetime import datetime, timedelta\r\n-from fastapi.security import OAuth2PasswordBearer as OAuth\r\n-from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from tortoise import Tortoise\r\n-from models import Orders\r\n-from utils import register_redis, get_all_devices,handle_devices\r\n-from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n-from jwt.exceptions import DecodeError,InvalidTokenError\r\n-from starlette import status\r\n-import base64\r\n-import jwt\r\n-import asyncio\r\n-\r\n-app = FastAPI()\r\n-\r\n-register_redis(app)\r\n-oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-\r\n-@app.websocket(\"/ws/{device_id}\")\r\n-async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n-    await websocket.accept()\r\n-    try:\r\n-        await websocket.close(code=401)\r\n-        return\r\n-        token = await websocket.receive_text()\r\n-        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-        print(payload)\r\n-        redis = app.redis\r\n-        accounts = app.redis_accounts\r\n-        while True:\r\n-            message = await websocket.receive_text()\r\n-            response = \"\"\r\n-            if device_id == \"manager\":\r\n-                response = await get_all_devices(redis, accounts)\r\n-                response = json.dumps(response)\r\n-            else:\r\n-                await handle_devices(websocket, redis, accounts, device_id) \r\n-            if message != \"ping\":\r\n-                pass\r\n-            await websocket.send_text(response)\r\n-    except InvalidTokenError:\r\n-        print(\"Invalid token\")\r\n-    except Exception as e:\r\n-        print(\"Other exception occurred\")\r\n-    finally:\r\n-        await websocket.close(code=401)\r\n-\r\n-\r\n-@app.post(\"/api/reset\")\r\n-async def reset():\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.flushall()\r\n-    await accounts.flushall()\r\n-    return {\"success\": \"重置成功\"}\r\n-\r\n-\r\n-async def create_table_if_not_exists():\r\n-    try:\r\n-        await Tortoise.init(\r\n-            db_url=os.getenv(\"DATABASE_URL\"),\r\n-            modules={'models': ['models']}\r\n-        )\r\n-        await Tortoise.generate_schemas()\r\n-    except Exception as e:\r\n-        pass\r\n-\r\n-\r\n-async def close_database_connection():\r\n-    await Tortoise.close_connections()\r\n-\r\n-@app.on_event(\"startup\")\r\n-async def srartup_event():\r\n-    await create_table_if_not_exists()\r\n-\r\n-\r\n-@app.post(\"/api/capture\")\r\n-async def freeze(device: DevicesCapture):\r\n-    await Orders.create(image=device.image)\r\n-\r\n-@app.post(\"/api/freeze\")\r\n-async def freeze(device: DeviceFreezeRequest):\r\n-    print(\"freeze function called\")\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    await redis.set(device.device_id, \"闲置中\")\r\n-\r\n-    acc = json.loads(await accounts.get(device.id))\r\n-    acc['status'] = \"2\"\r\n-    await accounts.set(device.id, json.dumps(acc))\r\n-\r\n-    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n-    return {\"success\": \"释放成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/prepare\")\r\n-async def start(task: TaskRequest):\r\n-    redis = app.redis\r\n-    accounts = app.redis_accounts\r\n-    pool = await get_all_devices(redis, accounts)\r\n-    for device in pool['devices']:\r\n-        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n-\r\n-    for account in task.accounts:\r\n-        acc = account.model_dump()\r\n-        acc['category'] = task.type\r\n-        await accounts.setnx(account.id, json.dumps(acc))\r\n-        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n-\r\n-    return {\"success\": \"任务创建成功\"}\r\n-\r\n-\r\n-@app.post(\"/api/login\")\r\n-def login(login: Login):\r\n-    if login.token == os.getenv(\"TOKEN\"):\r\n-        expires_in = datetime.now() + timedelta(days=7)\r\n-        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n-        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n-    else:\r\n-        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n-\r\n-\r\n-@app.post(\"/api/verify\")\r\n-def verify(token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n-       return {\"token\": token, \"payload\": payload}\r\n-    except:\r\n-        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n-\r\n-\r\n-def handle_shutdown(signum, frame):\r\n-    print(\"Shutting down...\")\r\n-    loop = asyncio.get_event_loop()\r\n-    loop.stop()\r\n-\r\n-@app.on_event(\"shutdown\")\r\n-async def shutdown_event():\r\n-    await close_database_connection()\r\n-\r\n-if __name__ == \"__main__\":\r\n-    import uvicorn\r\n-    signal.signal(signal.SIGINT, handle_shutdown)\r\n     uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710672067016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,12 @@\n                 pass\r\n             await websocket.send_text(response)\r\n     except InvalidTokenError:\r\n         print(\"Invalid token\")\r\n+        await websocket.close(code=401)\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n-         await websocket.close(code=401)\r\n+        await websocket.close(code=401)\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n async def reset():\r\n"
                },
                {
                    "date": 1710672097446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n                 pass\r\n             await websocket.send_text(response)\r\n     except InvalidTokenError:\r\n         print(\"Invalid token\")\r\n-        await websocket.close(code=401)\r\n+        await websocket.close(code=401, reason=\"Invalid token\")\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n         await websocket.close(code=401)\r\n \r\n"
                },
                {
                    "date": 1710672168390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,12 +50,11 @@\n                 pass\r\n             await websocket.send_text(response)\r\n     except InvalidTokenError:\r\n         print(\"Invalid token\")\r\n-        await websocket.close(code=401, reason=\"Invalid token\")\r\n+        await websocket.send_text(401)\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n-        await websocket.close(code=401)\r\n \r\n \r\n @app.post(\"/api/reset\")\r\n async def reset():\r\n"
                },
                {
                    "date": 1710672185321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n                 pass\r\n             await websocket.send_text(response)\r\n     except InvalidTokenError:\r\n         print(\"Invalid token\")\r\n-        await websocket.send_text(401)\r\n+        await websocket.send_text(\"401\")\r\n     except Exception as e:\r\n         print(\"Other exception occurred\")\r\n \r\n \r\n"
                },
                {
                    "date": 1710672307051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+from jwt.exceptions import DecodeError,InvalidTokenError\r\n+from starlette import status\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    try:\r\n+        token = await websocket.receive_text()\r\n+        payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+        redis = app.redis\r\n+        accounts = app.redis_accounts\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                response = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(response)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except InvalidTokenError:\r\n+        print(\"Invalid token\")\r\n+        await websocket.send_text(\"401\")\r\n+    except Exception as e:\r\n+        print(\"Other exception occurred\")\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+async def close_database_connection():\r\n+    await Tortoise.close_connections()\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    await close_database_connection()\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710672438528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+from jwt.exceptions import DecodeError,InvalidTokenError\r\n+from starlette import status\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    try:\r\n+        token = await websocket.receive_text()\r\n+        if(device_id == \"manager\"){\r\n+           jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+        }\r\n+        redis = app.redis\r\n+        accounts = app.redis_accounts\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                response = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(response)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except InvalidTokenError:\r\n+        print(\"Invalid token\")\r\n+        await websocket.send_text(\"401\")\r\n+    except Exception as e:\r\n+        print(\"Other exception occurred\")\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+async def close_database_connection():\r\n+    await Tortoise.close_connections()\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    await close_database_connection()\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710672453805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+import json\r\n+import os\r\n+import signal\r\n+from datetime import datetime, timedelta\r\n+from fastapi.security import OAuth2PasswordBearer as OAuth\r\n+from fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from tortoise import Tortoise\r\n+from models import Orders\r\n+from utils import register_redis, get_all_devices,handle_devices\r\n+from models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\n+from jwt.exceptions import DecodeError,InvalidTokenError\r\n+from starlette import status\r\n+import base64\r\n+import jwt\r\n+import asyncio\r\n+\r\n+app = FastAPI()\r\n+\r\n+register_redis(app)\r\n+oauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+\r\n+@app.websocket(\"/ws/{device_id}\")\r\n+async def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n+    await websocket.accept()\r\n+    try:\r\n+        token = await websocket.receive_text()\r\n+        if(device_id == \"manager\"):\r\n+            jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+        redis = app.redis\r\n+        accounts = app.redis_accounts\r\n+        while True:\r\n+            message = await websocket.receive_text()\r\n+            response = \"\"\r\n+            if device_id == \"manager\":\r\n+                response = await get_all_devices(redis, accounts)\r\n+                response = json.dumps(response)\r\n+            else:\r\n+                await handle_devices(websocket, redis, accounts, device_id) \r\n+            if message != \"ping\":\r\n+                pass\r\n+            await websocket.send_text(response)\r\n+    except InvalidTokenError:\r\n+        print(\"Invalid token\")\r\n+        await websocket.send_text(\"401\")\r\n+    except Exception as e:\r\n+        print(\"Other exception occurred\")\r\n+\r\n+\r\n+@app.post(\"/api/reset\")\r\n+async def reset():\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.flushall()\r\n+    await accounts.flushall()\r\n+    return {\"success\": \"重置成功\"}\r\n+\r\n+\r\n+async def create_table_if_not_exists():\r\n+    try:\r\n+        await Tortoise.init(\r\n+            db_url=os.getenv(\"DATABASE_URL\"),\r\n+            modules={'models': ['models']}\r\n+        )\r\n+        await Tortoise.generate_schemas()\r\n+    except Exception as e:\r\n+        pass\r\n+\r\n+\r\n+async def close_database_connection():\r\n+    await Tortoise.close_connections()\r\n+\r\n+@app.on_event(\"startup\")\r\n+async def srartup_event():\r\n+    await create_table_if_not_exists()\r\n+\r\n+\r\n+@app.post(\"/api/capture\")\r\n+async def freeze(device: DevicesCapture):\r\n+    await Orders.create(image=device.image)\r\n+\r\n+@app.post(\"/api/freeze\")\r\n+async def freeze(device: DeviceFreezeRequest):\r\n+    print(\"freeze function called\")\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    await redis.set(device.device_id, \"闲置中\")\r\n+\r\n+    acc = json.loads(await accounts.get(device.id))\r\n+    acc['status'] = \"2\"\r\n+    await accounts.set(device.id, json.dumps(acc))\r\n+\r\n+    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n+    return {\"success\": \"释放成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/prepare\")\r\n+async def start(task: TaskRequest):\r\n+    redis = app.redis\r\n+    accounts = app.redis_accounts\r\n+    pool = await get_all_devices(redis, accounts)\r\n+    for device in pool['devices']:\r\n+        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n+\r\n+    for account in task.accounts:\r\n+        acc = account.model_dump()\r\n+        acc['category'] = task.type\r\n+        await accounts.setnx(account.id, json.dumps(acc))\r\n+        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n+\r\n+    return {\"success\": \"任务创建成功\"}\r\n+\r\n+\r\n+@app.post(\"/api/login\")\r\n+def login(login: Login):\r\n+    if login.token == os.getenv(\"TOKEN\"):\r\n+        expires_in = datetime.now() + timedelta(days=7)\r\n+        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n+        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n+    else:\r\n+        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n+\r\n+\r\n+@app.post(\"/api/verify\")\r\n+def verify(token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n+       return {\"token\": token, \"payload\": payload}\r\n+    except:\r\n+        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n+\r\n+\r\n+def handle_shutdown(signum, frame):\r\n+    print(\"Shutting down...\")\r\n+    loop = asyncio.get_event_loop()\r\n+    loop.stop()\r\n+\r\n+@app.on_event(\"shutdown\")\r\n+async def shutdown_event():\r\n+    await close_database_connection()\r\n+\r\n+if __name__ == \"__main__\":\r\n+    import uvicorn\r\n+    signal.signal(signal.SIGINT, handle_shutdown)\r\n+    uvicorn.run(app, host=\"localhost\", port=8000)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1710661491342,
            "name": "Commit-0",
            "content": "import json\r\nimport os\r\nfrom datetime import datetime, timedelta\r\nfrom fastapi.security import OAuth2PasswordBearer as OAuth\r\nfrom fastapi import Depends, FastAPI, HTTPException, WebSocket, BackgroundTasks\r\nfrom fastapi.middleware.cors import CORSMiddleware\r\nfrom tortoise import Tortoise\r\nfrom models import Orders\r\nfrom utils import register_redis, get_all_devices,handle_devices\r\nfrom models import TaskRequest, DeviceFreezeRequest, DevicesCapture, Login\r\nimport base64\r\nimport jwt\r\n\r\n\r\napp = FastAPI()\r\n\r\nregister_redis(app)\r\noauth2_scheme=OAuth(tokenUrl=\"/api/login\")\r\n\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=[\"*\"],\r\n    allow_methods=[\"*\"],\r\n    allow_headers=[\"*\"],\r\n)\r\n\r\n\r\n@app.websocket(\"/ws/{device_id}\")\r\nasync def websocket_endpoint(websocket: WebSocket, device_id: str):\r\n    await websocket.accept()\r\n    print(websocket.client.host)\r\n    redis = app.redis\r\n    accounts = app.redis_accounts\r\n    try:\r\n        while True:\r\n            message = await websocket.receive_text()\r\n            response = \"\"\r\n            if device_id == \"manager\":\r\n                resposne = await get_all_devices(redis, accounts)\r\n                response = json.dumps(resposne)\r\n            else:\r\n                await handle_devices(websocket, redis, accounts, device_id) \r\n            if message != \"ping\":\r\n                pass\r\n            await websocket.send_text(response)\r\n    except jwt.exceptions.InvalidTokenError:\r\n        await websocket.close()\r\n    except Exception as e:\r\n        await websocket.close()\r\n\r\n\r\n@app.post(\"/api/reset\")\r\nasync def reset():\r\n    redis = app.redis\r\n    accounts = app.redis_accounts\r\n    await redis.flushall()\r\n    await accounts.flushall()\r\n    return {\"success\": \"重置成功\"}\r\n\r\n\r\nasync def create_table_if_not_exists():\r\n    try:\r\n        await Tortoise.init(\r\n            db_url=os.getenv(\"DATABASE_URL\"),\r\n            modules={'models': ['models']}\r\n        )\r\n        await Tortoise.generate_schemas()\r\n    except Exception as e:\r\n        pass\r\n\r\n\r\n@app.on_event(\"startup\")\r\nasync def srartup_event():\r\n    await create_table_if_not_exists()\r\n\r\n\r\n@app.post(\"/api/capture\")\r\nasync def freeze(device: DevicesCapture):\r\n    await Orders.create(image=device.image)\r\n\r\n@app.post(\"/api/freeze\")\r\nasync def freeze(device: DeviceFreezeRequest):\r\n    print(\"freeze function called\")\r\n    redis = app.redis\r\n    accounts = app.redis_accounts\r\n    await redis.set(device.device_id, \"闲置中\")\r\n\r\n    acc = json.loads(await accounts.get(device.id))\r\n    acc['status'] = \"2\"\r\n    await accounts.set(device.id, json.dumps(acc))\r\n\r\n    await redis.lpush(f\"queue:{device.device_id}\", device.device_id)\r\n    return {\"success\": \"释放成功\"}\r\n\r\n\r\n@app.post(\"/api/prepare\")\r\nasync def start(task: TaskRequest):\r\n    redis = app.redis\r\n    accounts = app.redis_accounts\r\n    pool = await get_all_devices(redis, accounts)\r\n    for device in pool['devices']:\r\n        await redis.lpush(f\"queue:{device['device_id']}\", device['device_id'])\r\n\r\n    for account in task.accounts:\r\n        acc = account.model_dump()\r\n        acc['category'] = task.type\r\n        await accounts.setnx(account.id, json.dumps(acc))\r\n        await redis.lpush(\"queue:task\", json.dumps(acc))\r\n\r\n    return {\"success\": \"任务创建成功\"}\r\n\r\n\r\n@app.post(\"/api/login\")\r\ndef login(login: Login):\r\n    if login.token == os.getenv(\"TOKEN\"):\r\n        expires_in = datetime.now() + timedelta(days=7)\r\n        token = jwt.encode({\"sub\": login.token, \"exp\": expires_in}, os.getenv(\"SECRET_KEY\"), algorithm=\"HS256\")\r\n        return {\"access_token\": token, \"token_type\": \"bearer\"}\r\n    else:\r\n        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\r\n\r\n\r\n@app.post(\"/api/verify\")\r\ndef verify(token: str = Depends(oauth2_scheme)):\r\n    try:\r\n       print(token)\r\n       payload = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\r\n       return {\"token\": token, \"payload\": payload}\r\n    except:\r\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n    uvicorn.run(app, host=\"localhost\", port=8000)"
        }
    ]
}